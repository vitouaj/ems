// <auto-generated />
using System;
using EventAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventAPI.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a65b394-607d-4cf6-bdf7-01d1e28f4b6f"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2217),
                            CreatedBy = new Guid("d71c5034-4bee-453f-be8a-7eec7f2e6673"),
                            Name = "Education",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2212),
                            UpdatedBy = new Guid("b435dca4-8acb-4446-9183-524ccb1ca7fe")
                        },
                        new
                        {
                            Id = new Guid("f6edd33c-70f0-4dc3-82ac-9f4ce0d0eba4"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2224),
                            CreatedBy = new Guid("f72a7649-45aa-4dc2-a81a-e186762f68d4"),
                            Name = "Community",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2223),
                            UpdatedBy = new Guid("90831a7f-989d-4245-9677-97cf9480517c")
                        },
                        new
                        {
                            Id = new Guid("4ea0e2fc-6264-4116-81de-01b29b8c14cb"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2239),
                            CreatedBy = new Guid("0b1f3a11-5560-4e21-bdaa-85cca69a08cf"),
                            Name = "Entrepreneurship",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2238),
                            UpdatedBy = new Guid("56346e46-d216-4615-bde1-20536b98f6bf")
                        },
                        new
                        {
                            Id = new Guid("322f5cca-291e-4bdc-9ae4-cd11317f2712"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2243),
                            CreatedBy = new Guid("3ca81d69-a15f-45cb-aa26-c6b33f29eb37"),
                            Name = "Technology",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2243),
                            UpdatedBy = new Guid("53ebbbdc-2919-4977-a66e-47842345c5b6")
                        },
                        new
                        {
                            Id = new Guid("30ac51bd-6470-4801-9a9d-960b80af2ae6"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2247),
                            CreatedBy = new Guid("03fbf2b6-2db4-4e51-8a82-3f6374cd873f"),
                            Name = "Health Care",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2246),
                            UpdatedBy = new Guid("60d01932-b370-4932-a6cc-7d5953ffde90")
                        },
                        new
                        {
                            Id = new Guid("25babb0e-0c88-4af7-99ad-5df9339cbf25"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2253),
                            CreatedBy = new Guid("12f1beb9-3509-4b66-bad4-b435750bac0a"),
                            Name = "NGO",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2253),
                            UpdatedBy = new Guid("13c1f565-1307-462b-828b-f9ad2e7c6d01")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndedDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfParticipant")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc66aaec-36f2-4207-9962-45a2dadd93a3"),
                            CategoryId = new Guid("322f5cca-291e-4bdc-9ae4-cd11317f2712"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2499),
                            CreatedBy = new Guid("87cc5850-aa70-4855-9a93-c4fd96fc375d"),
                            Description = "a public event to gather aws users in cambodia to connect and share experience working in the industry. many session are hosted by professional which available for free. any one can join.",
                            EndedDate = new DateOnly(2024, 3, 21),
                            Name = "AWS 2024 Cambodia Conference",
                            NumberOfParticipant = 50,
                            StartedDate = new DateOnly(2024, 3, 21),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2499),
                            UpdatedBy = new Guid("b41e5d03-cc91-4f4a-af47-dec33f411be5"),
                            VenueId = new Guid("d370967c-3da8-45f5-8890-bff9669c8a1d")
                        },
                        new
                        {
                            Id = new Guid("60d59b4c-7672-403e-860c-e6acf8c80931"),
                            CategoryId = new Guid("322f5cca-291e-4bdc-9ae4-cd11317f2712"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2508),
                            CreatedBy = new Guid("7ef92b7d-f631-4fab-b2d5-4f91b9263964"),
                            Description = "An annual tech summit aimed at bringing together tech enthusiasts, startups, and industry experts to discuss the latest trends and innovations in the Cambodian tech ecosystem.",
                            EndedDate = new DateOnly(2024, 4, 21),
                            Name = "Cambodia Tech Summit 2024",
                            NumberOfParticipant = 130,
                            StartedDate = new DateOnly(2024, 4, 21),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2508),
                            UpdatedBy = new Guid("e328166a-675a-4371-899e-2ffbf1a8efa6"),
                            VenueId = new Guid("d370967c-3da8-45f5-8890-bff9669c8a1d")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("EndedAt")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("StartedAt")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e568f18b-8c28-4b1d-8c82-a43aed688f04"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2575),
                            CreatedBy = new Guid("e463a179-2ab4-4cb9-b502-847959eb2371"),
                            Date = new DateOnly(2024, 3, 21),
                            EndedAt = new TimeOnly(11, 0, 0),
                            EventId = new Guid("bc66aaec-36f2-4207-9962-45a2dadd93a3"),
                            Name = "Warm up session",
                            StartedAt = new TimeOnly(9, 0, 0),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2575),
                            UpdatedBy = new Guid("92de6777-7529-45a2-9fb9-6c93ff400f0e")
                        },
                        new
                        {
                            Id = new Guid("04068974-c881-4acf-9ee5-3589ae7d4ddb"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2582),
                            CreatedBy = new Guid("b7dbd5da-24c1-4e7b-8e85-2a41378b5bd4"),
                            Date = new DateOnly(2024, 3, 21),
                            EndedAt = new TimeOnly(16, 0, 0),
                            EventId = new Guid("bc66aaec-36f2-4207-9962-45a2dadd93a3"),
                            Name = "Cambodia development | AWS annual report",
                            StartedAt = new TimeOnly(14, 0, 0),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2582),
                            UpdatedBy = new Guid("e0ab0859-0fba-4235-bd0b-0311fb2c5209")
                        },
                        new
                        {
                            Id = new Guid("2a5f9e28-62a0-482a-8fa8-3bc302f0acd2"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2586),
                            CreatedBy = new Guid("eb827fd0-aa1d-4c7a-80c3-fabda8383f53"),
                            Date = new DateOnly(2024, 4, 21),
                            Description = "Panel discussion featuring successful Cambodian startup founders sharing their journey, challenges, and insights.",
                            EndedAt = new TimeOnly(11, 0, 0),
                            EventId = new Guid("60d59b4c-7672-403e-860c-e6acf8c80931"),
                            Name = "Tech Startup Panel",
                            StartedAt = new TimeOnly(9, 0, 0),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2586),
                            UpdatedBy = new Guid("f76617b6-b7e5-4ac8-913a-110d36fe1d56")
                        },
                        new
                        {
                            Id = new Guid("6dbb2229-2cef-453c-b5c7-a3950a5c9e1f"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2590),
                            CreatedBy = new Guid("3598aadd-e7b3-43db-a9a2-ba58e3eb1055"),
                            Date = new DateOnly(2024, 4, 21),
                            Description = "Hands-on workshop exploring AI and machine learning concepts and applications, tailored for beginners and enthusiasts.",
                            EndedAt = new TimeOnly(16, 0, 0),
                            EventId = new Guid("60d59b4c-7672-403e-860c-e6acf8c80931"),
                            Name = "AI and Machine Learning Workshop",
                            StartedAt = new TimeOnly(14, 0, 0),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2590),
                            UpdatedBy = new Guid("0b424dcf-794f-469f-97c5-71529f3b9dc9")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoogleMapUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d370967c-3da8-45f5-8890-bff9669c8a1d"),
                            BuildingNo = "OCIC HALL F",
                            City = "phnom penh",
                            CreatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2462),
                            CreatedBy = new Guid("386cd6f2-6966-4fdd-bcda-43df976dd2ef"),
                            District = "chroy chongva",
                            GoogleMapUrl = "https://maps.app.goo.gl/Z7g5m2JLUGncbZtJ8",
                            Name = "OCIC wedding hall",
                            Street = "ocic 591 street",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 18, 20, 929, DateTimeKind.Utc).AddTicks(2461),
                            UpdatedBy = new Guid("83df4941-88a5-486b-8615-ebb6a3d492ba")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.HasOne("EventAPI.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventAPI.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("EventAPI.Models.Session", b =>
                {
                    b.HasOne("EventAPI.Models.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventAPI.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EventAPI.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
