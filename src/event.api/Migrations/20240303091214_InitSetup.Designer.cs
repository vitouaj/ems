// <auto-generated />
using System;
using EventAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240303091214_InitSetup")]
    partial class InitSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventAPI.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a65b394-607d-4cf6-bdf7-01d1e28f4b6f"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3462),
                            CreatedBy = new Guid("1ee39d4b-a8c7-4c62-8ea3-0250fefeeaf2"),
                            Name = "Education",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3459),
                            UpdatedBy = new Guid("848e4b15-e2e6-40e8-942e-be028e280e4f")
                        },
                        new
                        {
                            Id = new Guid("f6edd33c-70f0-4dc3-82ac-9f4ce0d0eba4"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3468),
                            CreatedBy = new Guid("5be35a05-5786-48d1-b55d-913316d27944"),
                            Name = "Community",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3468),
                            UpdatedBy = new Guid("ae2e2e5a-015f-40ae-b165-e3b3a71e8a8b")
                        },
                        new
                        {
                            Id = new Guid("4ea0e2fc-6264-4116-81de-01b29b8c14cb"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3471),
                            CreatedBy = new Guid("b6951680-e946-4903-8dec-2883d858b4b9"),
                            Name = "Entrepreneurship",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3471),
                            UpdatedBy = new Guid("bb2d03af-9659-49eb-a373-96696e4269e8")
                        },
                        new
                        {
                            Id = new Guid("322f5cca-291e-4bdc-9ae4-cd11317f2712"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3476),
                            CreatedBy = new Guid("9b294d7f-46ea-4ef3-a843-1f2d81cb93fb"),
                            Name = "Technology",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3476),
                            UpdatedBy = new Guid("39074a3c-be6a-449a-bb8f-7abb7e439f16")
                        },
                        new
                        {
                            Id = new Guid("30ac51bd-6470-4801-9a9d-960b80af2ae6"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3479),
                            CreatedBy = new Guid("50f98048-0b9f-49ce-bac6-1420a9359f5c"),
                            Name = "Health Care",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3479),
                            UpdatedBy = new Guid("1ddb2298-bcf3-493e-a034-8392bb055b6e")
                        },
                        new
                        {
                            Id = new Guid("25babb0e-0c88-4af7-99ad-5df9339cbf25"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3482),
                            CreatedBy = new Guid("06c456f2-2c3f-458f-9627-63e0eb287a8e"),
                            Name = "NGO",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3482),
                            UpdatedBy = new Guid("44abf5c1-a90f-4538-ac7e-c0a0b209b01e")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndedDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfParticipant")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc66aaec-36f2-4207-9962-45a2dadd93a3"),
                            CategoryId = new Guid("322f5cca-291e-4bdc-9ae4-cd11317f2712"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3699),
                            CreatedBy = new Guid("35b5faac-e668-47e4-920c-8a3fb75ce17c"),
                            Description = "a public event to gather aws users in cambodia to connect and share experience working in the industry. many session are hosted by professional which available for free. any one can join.",
                            EndedDate = new DateOnly(2024, 3, 21),
                            Name = "AWS 2024 Cambodia Conference",
                            NumberOfParticipant = 50,
                            StartedDate = new DateOnly(2024, 3, 21),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3699),
                            UpdatedBy = new Guid("faa26d24-6e96-47b9-afd3-cceff8635393"),
                            VenueId = new Guid("d370967c-3da8-45f5-8890-bff9669c8a1d")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("EndedAt")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("StartedAt")
                        .HasColumnType("time without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("974f045d-8312-40d0-b9cf-f3427b904909"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3724),
                            CreatedBy = new Guid("795f7865-ab13-44c9-b6da-608abea01bc6"),
                            Date = new DateOnly(2024, 3, 21),
                            EndedAt = new TimeOnly(11, 0, 0),
                            EventId = new Guid("bc66aaec-36f2-4207-9962-45a2dadd93a3"),
                            Name = "Warm up session",
                            StartedAt = new TimeOnly(9, 0, 0),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3723),
                            UpdatedBy = new Guid("d740a4cf-49ed-4216-a57e-dd3d29325b54")
                        },
                        new
                        {
                            Id = new Guid("d190a07b-7670-4ccc-80d3-daaf25bfb685"),
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3727),
                            CreatedBy = new Guid("bf60d01f-47bf-47d2-9ecf-5dc65ed67431"),
                            Date = new DateOnly(2024, 3, 21),
                            EndedAt = new TimeOnly(16, 0, 0),
                            EventId = new Guid("bc66aaec-36f2-4207-9962-45a2dadd93a3"),
                            Name = "Cambodia development | AWS annual report",
                            StartedAt = new TimeOnly(14, 0, 0),
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3726),
                            UpdatedBy = new Guid("ee77f054-8f4b-4162-b89a-0a56dfd4ecd9")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoogleMapUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d370967c-3da8-45f5-8890-bff9669c8a1d"),
                            BuildingNo = "OCIC HALL F",
                            City = "phnom penh",
                            CreatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3671),
                            CreatedBy = new Guid("ab10274d-745f-4dcf-89ca-040717e7adb3"),
                            District = "chroy chongva",
                            GoogleMapUrl = "https://maps.app.goo.gl/Z7g5m2JLUGncbZtJ8",
                            Name = "OCIC wedding hall",
                            Street = "ocic 591 street",
                            UpdatedAt = new DateTime(2024, 3, 3, 9, 12, 13, 722, DateTimeKind.Utc).AddTicks(3670),
                            UpdatedBy = new Guid("3cfce0eb-f916-4342-a9c2-7e5e087561a1")
                        });
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.HasOne("EventAPI.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventAPI.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("EventAPI.Models.Session", b =>
                {
                    b.HasOne("EventAPI.Models.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventAPI.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventAPI.Models.Event", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EventAPI.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
